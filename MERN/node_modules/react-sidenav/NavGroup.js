"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Nav_1 = require("./Nav");
var _1 = require("./");
var NavGroupState;
(function (NavGroupState) {
    NavGroupState["expanded"] = "expanded";
    NavGroupState["collapsed"] = "collapsed";
})(NavGroupState = exports.NavGroupState || (exports.NavGroupState = {}));
var ChildrenIndicatorIcon = function (props) {
    var style = { width: props.size || 16, height: props.size || 16 };
    return (React.createElement("i", { style: style },
        React.createElement("svg", __assign({ fill: "currentColor", style: style, viewBox: "0 0 24 24", width: "1em", height: "1em" }, props),
            React.createElement("path", { d: "M8.59 16.58L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.42z" }))));
};
var StyleCollapsed = Object.freeze({
    maxHeight: 0,
    transition: 'max-height 0.3s ease-out',
    overflow: 'hidden',
});
var StyleExpanded = Object.freeze({
    overflow: 'hidden',
    maxHeight: '1000px',
    transition: 'max-height 0.5s ease-in'
});
exports.NavGroupChildren = function (props) {
    var context = React.useContext(_1.SideNavContext);
    var ref = React.createRef();
    React.useEffect(function () {
        var eventListener = function (e) {
            var el = e.target;
            if (ref.current && !ref.current.contains(el)) {
                props.toggleCollapsed();
            }
        };
        window.addEventListener('click', eventListener);
        return function () {
            window.removeEventListener('click', eventListener);
        };
    }, [ref]);
    if (context.mode === _1.ViewMode.compact) {
        if (props.state === NavGroupState.expanded) {
            var current = props.rootRef.current;
            var width = current.clientWidth;
            return (React.createElement("div", { ref: ref, style: {
                    background: ref.current ? ref.current.style.background : '#FFF',
                    width: width,
                    position: 'absolute',
                    zIndex: 100,
                    left: width + 1,
                    top: 0
                } }, props.children));
        }
    }
    else {
        var style = props.state === NavGroupState.collapsed ? StyleCollapsed : StyleExpanded;
        return (React.createElement("div", { "data-navgroupstate": props.state, style: style }, props.children));
    }
    return null;
};
var ToggleIndicatorStyle = {
    top: 0,
    right: 8,
    width: 4,
    height: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: "absolute",
    transition: "all 0.2s linear"
};
var ToggleIndicator = function (props) {
    var transform = props.collapsed === NavGroupState.collapsed ? "rotate(0deg)" : "rotate(90deg)";
    return (React.createElement("div", { style: __assign({}, ToggleIndicatorStyle, { transform: transform }) },
        React.createElement(ChildrenIndicatorIcon, null)));
};
exports.NavGroup = function (props) {
    var children = props.children, onClick = props.onClick, others = __rest(props, ["children", "onClick"]);
    var _a = React.useState(NavGroupState.collapsed), state = _a[0], setState = _a[1];
    var rootRef = React.useRef(null);
    var onHandleClick = function (e) {
        if (e) {
            e.stopPropagation();
        }
        setState(function (currentState) {
            return currentState === NavGroupState.collapsed ? NavGroupState.expanded : NavGroupState.collapsed;
        });
    };
    // we would want to render the main items but
    // not the children
    var navChildren = [];
    var nonNavChildren = [];
    React.Children.toArray(children).forEach(function (child) {
        var childEl = child;
        if (childEl.type === Nav_1.Nav) {
            navChildren.push(child);
        }
        else {
            nonNavChildren.push(child);
        }
    });
    return (React.createElement("div", __assign({}, others, { onClick: onHandleClick, ref: rootRef, style: { position: 'relative' } }),
        React.createElement("div", { style: { position: 'relative' } },
            nonNavChildren,
            React.createElement(ToggleIndicator, { collapsed: state })),
        React.createElement(exports.NavGroupChildren, { toggleCollapsed: onHandleClick, rootRef: rootRef, state: state }, navChildren)));
};
